@model BritishCab.Models.Booking

<style>
    #map {
        width: 100%;
        height: 400px;
    }
</style>

<script type="text/javascript">
	//$(function() { // will trigger when the document is ready
	//	$('.datepicker').datepicker(); //Initialise any date pickers
	//});

	$(document).ready(function() {
		jQuery('#datetimepicker').datetimepicker({ theme: 'dark', format: 'd/m/Y H:i' });
	});
</script>

<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false&libraries=places"></script>
<div style="background-color: #696E6F;">

		@using (Html.BeginForm("Booking", "Home",
		FormMethod.Post, new { @class = "booking-form" }))
		{
			@Html.AntiForgeryToken()
			<div class="container">
				<div class="form-horizontal">
                    <h3 class="title" style="margin-top: 20px;color:white">Booking</h3>
                    <div class="separator-2"></div>
					<div class="row">
						<div class="col-lg-5">
							@Html.ValidationSummary(true, "", new { @class = "text-danger" })
							@Html.HiddenFor(model => model.BookingId)
							@Html.HiddenFor(model => model.DriverActualDepartureTime)
							<input type="hidden" id="Price" name="Price" value="@Model.Price" />

							<script type="text/javascript">
								var options = {
									types: ['(cities)'],
									componentRestrictions: { country: "uk" }
								};

								google.maps.event.addDomListener(window, 'load', function () {
									var places = new google.maps.places.Autocomplete(document.getElementById('start'), options);
									google.maps.event.addListener(places, 'place_changed', function () {
										var place = places.getPlace();
										var address = place.formatted_address;
										var latitude = place.geometry.location.lat();
										var longitude = place.geometry.location.lng();
										//var mesg = "Address: " + address;
										//mesg += "\nLatitude: " + latitude;
										//mesg += "\nLongitude: " + longitude;
										//alert(mesg);
									});
								});
								google.maps.event.addDomListener(window, 'load', function () {
									var places2 = new google.maps.places.Autocomplete(document.getElementById('end'), options);
								});
							</script>

							<div class="form-group">
								@Html.LabelFor(model => model.PickUpLocation, htmlAttributes: new { @class = "control-label col-md-4 col-sm-2" })
								<div class="col-md-6">
									@Html.EditorFor(model => model.PickUpLocation, new { htmlAttributes = new { @class = "form-control", id = "start", required = "required", autocomplete = "off" } })
									@Html.ValidationMessageFor(model => model.PickUpLocation, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.DropLocation, htmlAttributes: new { @class = "control-label col-md-4 col-sm-2" })
								<div class="col-md-6">
									@Html.EditorFor(model => model.DropLocation, new { htmlAttributes = new { @class = "form-control", id = "end", required = "required", autocomplete = "off" } })
									@Html.ValidationMessageFor(model => model.DropLocation, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.PickUpDateTime, htmlAttributes: new { @class = "control-label col-md-4 col-sm-2" })
								<div class="col-md-6">
									@if (Model.PickUpDateTime == DateTime.MinValue)
									{
										@Html.TextBoxFor(model => model.PickUpDateTime, new { @Value = "", @class = "form-control text-box single-line", id = "datetimepicker", placeholder = "Choose pich up time", required = "required", autocomplete = "off" })
									}
									else
									{
										@Html.TextBoxFor(model => model.PickUpDateTime, new { @Value = Model.PickUpDateTime.ToString("dd/MM/yyyy HH:mm"), @class = "form-control text-box single-line", id = "datetimepicker", placeholder = "Choose pich up time", required = "required", autocomplete = "off" })
									}
									@Html.ValidationMessageFor(model => model.PickUpDateTime, "", new {@class = "text-danger"})
								</div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.TransferTime, htmlAttributes: new { @class = "control-label col-md-4 col-sm-2" })
								<div class="col-md-6">
									@Html.EditorFor(model => model.TransferTime, new { htmlAttributes = new { @class = "form-control" } })
									@Html.ValidationMessageFor(model => model.TransferTime, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group">
								@Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-4 col-sm-2" })
								<div class="col-md-6">
									@Html.TextBoxFor(model => model.Price, new { @Value = Model.Price.ToString("C"), @class = "form-control text-box single-line" })
									@Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
								</div>
							</div>

							<div class="form-group">
								<div class="col-md-offset-4 col-sm-offset-2 col-md-10">
									<input type="submit" name="Calculate" value="Calculate" class="btn btn-default" />
									<input type="submit" name="Book" value="Booking" class="btn btn-default" />
								</div>
							</div>
						</div>
						<div class="col-lg-7 visible-lg">
							<div id="map"></div>
						</div>
					</div>
				</div>

				<script>
					function initMap() {
						var mapDiv = document.getElementById('map');
						var mapOptions = {
							// How zoomed in you want the map to start at (always required)
							zoom: 11,

							// The latitude and longitude to center the map (always required)
							center: new google.maps.LatLng(51.4569511, -2.606284), // New York

							// How you would like to style the map.
							// This is where you would paste any style found on Snazzy Maps.
							styles: [{ "featureType": "all", "elementType": "labels.text.fill", "stylers": [{ "saturation": 36 }, { "color": "#000000" }, { "lightness": 40 }] }, { "featureType": "all", "elementType": "labels.text.stroke", "stylers": [{ "visibility": "on" }, { "color": "#000000" }, { "lightness": 16 }] }, { "featureType": "all", "elementType": "labels.icon", "stylers": [{ "visibility": "off" }] }, { "featureType": "administrative", "elementType": "geometry.fill", "stylers": [{ "color": "#000000" }, { "lightness": 20 }] }, { "featureType": "administrative", "elementType": "geometry.stroke", "stylers": [{ "color": "#000000" }, { "lightness": 17 }, { "weight": 1.2 }] }, { "featureType": "landscape", "elementType": "geometry", "stylers": [{ "color": "#000000" }, { "lightness": 20 }] }, { "featureType": "poi", "elementType": "geometry", "stylers": [{ "color": "#000000" }, { "lightness": 21 }] }, { "featureType": "road.highway", "elementType": "geometry.fill", "stylers": [{ "color": "#000000" }, { "lightness": 17 }] }, { "featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [{ "color": "#000000" }, { "lightness": 29 }, { "weight": 0.2 }] }, { "featureType": "road.arterial", "elementType": "geometry", "stylers": [{ "color": "#000000" }, { "lightness": 18 }] }, { "featureType": "road.local", "elementType": "geometry", "stylers": [{ "color": "#000000" }, { "lightness": 16 }] }, { "featureType": "transit", "elementType": "geometry", "stylers": [{ "color": "#000000" }, { "lightness": 19 }] }, { "featureType": "water", "elementType": "geometry", "stylers": [{ "color": "#000000" }, { "lightness": 17 }] }]
						};
						var map = new google.maps.Map(mapDiv, mapOptions);
					}
				</script>
			</div>
		}
	</div>
