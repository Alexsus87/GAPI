@model BritishCab.Models.BookingEntity

@{
	ViewBag.Title = "Booking";
}
<style>
	#map {
		width: 100%;
		height: 400px;
	}
</style>

@using (Html.BeginForm("Booking", "Home",
			new { ReturnUrl = ViewBag.ReturnUrl },
			FormMethod.Post, new { @class = "booking-form" }))
{
	@Html.AntiForgeryToken()
	<div class="container">
		<div class="form-horizontal">
			<h2>Booking</h2>
			<hr />
			<div class="row">
				<div class="col-lg-5">
					@Html.ValidationSummary(true, "", new { @class = "text-danger" })
					@Html.HiddenFor(model => model.BookingEntityId)

					<div class="form-group">
						@Html.LabelFor(model => model.PickUpLocation, htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-6">
							@Html.EditorFor(model => model.PickUpLocation, new { htmlAttributes = new { @class = "form-control", id = "start" } })
							@Html.ValidationMessageFor(model => model.PickUpLocation, "", new { @class = "text-danger" })
						</div>
					</div>

					<div class="form-group">
						@Html.LabelFor(model => model.DropLocation, htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-6">
							@Html.EditorFor(model => model.DropLocation, new { htmlAttributes = new { @class = "form-control", id = "end" } })
							@Html.ValidationMessageFor(model => model.DropLocation, "", new { @class = "text-danger" })
						</div>
					</div>

					<div class="form-group">
						@Html.LabelFor(model => model.PickUpDateTime, htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-6">
							@Html.EditorFor(model => model.PickUpDateTime, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.PickUpDateTime, "", new { @class = "text-danger" })
						</div>
					</div>

					<div class="form-group">
						@Html.LabelFor(model => model.TransferTime, htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-6">
							@Html.EditorFor(model => model.TransferTime, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.TransferTime, "", new { @class = "text-danger" })
						</div>
					</div>

					@*<div class="form-group">
						@Html.LabelFor(model => model.DrivingDistance, htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-6">
							@Html.EditorFor(model => model.DrivingDistance, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.DrivingDistance, "", new { @class = "text-danger" })
						</div>
					</div>*@

					<div class="form-group">
						@Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-6">
							@Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
						</div>
					</div>

					<div class="form-group">
						@Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new {@class = "control-label col-md-4"})
						<div class="col-md-6">
							@Html.EditorFor(model => model.PhoneNumber, new {htmlAttributes = new {@class = "form-control"}})
							@Html.ValidationMessageFor(model => model.PhoneNumber, "", new {@class = "text-danger"})
						</div>
					</div>

					<div class="form-group">
						@Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-6">
							@Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
						</div>
					</div>

					<div class="form-group">
						<div class="col-md-offset-2 col-md-10">
							<input type="submit" value="Save" class="btn btn-default" />
						</div>
					</div>
				</div>
				<div class="col-lg-7 visible-lg">
					<div id="map"></div>
				</div>
			</div>
		</div>

		<script>
			function initMap() {
				var mapDiv = document.getElementById('map');
				var mapOptions = {
					// How zoomed in you want the map to start at (always required)
					zoom: 11,

					// The latitude and longitude to center the map (always required)
					center: new google.maps.LatLng(51.4569511, -2.606284), // New York

					// How you would like to style the map. 
					// This is where you would paste any style found on Snazzy Maps.
					styles: [{ "featureType": "all", "elementType": "labels.text.fill", "stylers": [{ "saturation": 36 }, { "color": "#000000" }, { "lightness": 40 }] }, { "featureType": "all", "elementType": "labels.text.stroke", "stylers": [{ "visibility": "on" }, { "color": "#000000" }, { "lightness": 16 }] }, { "featureType": "all", "elementType": "labels.icon", "stylers": [{ "visibility": "off" }] }, { "featureType": "administrative", "elementType": "geometry.fill", "stylers": [{ "color": "#000000" }, { "lightness": 20 }] }, { "featureType": "administrative", "elementType": "geometry.stroke", "stylers": [{ "color": "#000000" }, { "lightness": 17 }, { "weight": 1.2 }] }, { "featureType": "landscape", "elementType": "geometry", "stylers": [{ "color": "#000000" }, { "lightness": 20 }] }, { "featureType": "poi", "elementType": "geometry", "stylers": [{ "color": "#000000" }, { "lightness": 21 }] }, { "featureType": "road.highway", "elementType": "geometry.fill", "stylers": [{ "color": "#000000" }, { "lightness": 17 }] }, { "featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [{ "color": "#000000" }, { "lightness": 29 }, { "weight": 0.2 }] }, { "featureType": "road.arterial", "elementType": "geometry", "stylers": [{ "color": "#000000" }, { "lightness": 18 }] }, { "featureType": "road.local", "elementType": "geometry", "stylers": [{ "color": "#000000" }, { "lightness": 16 }] }, { "featureType": "transit", "elementType": "geometry", "stylers": [{ "color": "#000000" }, { "lightness": 19 }] }, { "featureType": "water", "elementType": "geometry", "stylers": [{ "color": "#000000" }, { "lightness": 17 }] }]
				};
				var map = new google.maps.Map(mapDiv, mapOptions);
			}
		</script>
		<script src="https://maps.googleapis.com/maps/api/js?callback=initMap"
				async defer></script>
		@*<script async defer
					src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAPvZh2dox0FbQJ7WrhcQ4xo8IQ3kp_XrE&callback=initMap">
			</script>*@
		<div>
			@Html.ActionLink("Back", "Index")
		</div>
	</div>
}

